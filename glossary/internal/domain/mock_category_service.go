// Code generated by mockery 2.12.2. DO NOT EDIT.

package domain

import (
	model "secondhand_glossary/internal/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockCategoryService is an autogenerated mock type for the CategoryService type
type MockCategoryService struct {
	mock.Mock
}

// AddCategory provides a mock function with given fields: c
func (_m *MockCategoryService) AddCategory(c model.Category) (model.Category, error) {
	ret := _m.Called(c)

	var r0 model.Category
	if rf, ok := ret.Get(0).(func(model.Category) model.Category); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(model.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Category) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategory provides a mock function with given fields: categoryId
func (_m *MockCategoryService) DeleteCategory(categoryId uint) error {
	ret := _m.Called(categoryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(categoryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCategories provides a mock function with given fields:
func (_m *MockCategoryService) GetCategories() ([]model.Category, error) {
	ret := _m.Called()

	var r0 []model.Category
	if rf, ok := ret.Get(0).(func() []model.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryDevices provides a mock function with given fields: categoryId
func (_m *MockCategoryService) GetCategoryDevices(categoryId uint) ([]model.Device, error) {
	ret := _m.Called(categoryId)

	var r0 []model.Device
	if rf, ok := ret.Get(0).(func(uint) []model.Device); ok {
		r0 = rf(categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCategoryService creates a new instance of MockCategoryService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCategoryService(t testing.TB) *MockCategoryService {
	mock := &MockCategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
