// Code generated by mockery 2.12.2. DO NOT EDIT.

package domain

import (
	model "secondhand_glossary/internal/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockDeviceService is an autogenerated mock type for the DeviceService type
type MockDeviceService struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: d
func (_m *MockDeviceService) AddDevice(d model.Device) (model.Device, error) {
	ret := _m.Called(d)

	var r0 model.Device
	if rf, ok := ret.Get(0).(func(model.Device) model.Device); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Device) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceLink provides a mock function with given fields: b
func (_m *MockDeviceService) AddDeviceLink(b model.Link) (model.Link, error) {
	ret := _m.Called(b)

	var r0 model.Link
	if rf, ok := ret.Get(0).(func(model.Link) model.Link); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(model.Link)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Link) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceReview provides a mock function with given fields: r
func (_m *MockDeviceService) AddDeviceReview(r model.Review) (model.Review, error) {
	ret := _m.Called(r)

	var r0 model.Review
	if rf, ok := ret.Get(0).(func(model.Review) model.Review); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Review) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDeviceTrait provides a mock function with given fields: deviceId, traitId
func (_m *MockDeviceService) AddDeviceTrait(deviceId uint, traitId uint) (model.Device, error) {
	ret := _m.Called(deviceId, traitId)

	var r0 model.Device
	if rf, ok := ret.Get(0).(func(uint, uint) model.Device); ok {
		r0 = rf(deviceId, traitId)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(deviceId, traitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevice provides a mock function with given fields: deviceId
func (_m *MockDeviceService) DeleteDevice(deviceId uint) error {
	ret := _m.Called(deviceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceLink provides a mock function with given fields: linkId
func (_m *MockDeviceService) DeleteDeviceLink(linkId uint) error {
	ret := _m.Called(linkId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(linkId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceReview provides a mock function with given fields: r
func (_m *MockDeviceService) DeleteDeviceReview(r model.Review) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Review) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeviceTrait provides a mock function with given fields: deviceId, traitId
func (_m *MockDeviceService) DeleteDeviceTrait(deviceId uint, traitId uint) error {
	ret := _m.Called(deviceId, traitId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(deviceId, traitId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditDevice provides a mock function with given fields: d
func (_m *MockDeviceService) EditDevice(d model.Device) (model.Device, error) {
	ret := _m.Called(d)

	var r0 model.Device
	if rf, ok := ret.Get(0).(func(model.Device) model.Device); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Device) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditDeviceLink provides a mock function with given fields: b
func (_m *MockDeviceService) EditDeviceLink(b model.Link) (model.Link, error) {
	ret := _m.Called(b)

	var r0 model.Link
	if rf, ok := ret.Get(0).(func(model.Link) model.Link); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(model.Link)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Link) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditDeviceReview provides a mock function with given fields: r
func (_m *MockDeviceService) EditDeviceReview(r model.Review) (model.Review, error) {
	ret := _m.Called(r)

	var r0 model.Review
	if rf, ok := ret.Get(0).(func(model.Review) model.Review); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Review) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditDeviceScore provides a mock function with given fields: scr
func (_m *MockDeviceService) EditDeviceScore(scr model.Scores) (model.Scores, error) {
	ret := _m.Called(scr)

	var r0 model.Scores
	if rf, ok := ret.Get(0).(func(model.Scores) model.Scores); ok {
		r0 = rf(scr)
	} else {
		r0 = ret.Get(0).(model.Scores)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Scores) error); ok {
		r1 = rf(scr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: deviceId
func (_m *MockDeviceService) GetDevice(deviceId uint) (model.Device, error) {
	ret := _m.Called(deviceId)

	var r0 model.Device
	if rf, ok := ret.Get(0).(func(uint) model.Device); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceLink provides a mock function with given fields: deviceId, linkId
func (_m *MockDeviceService) GetDeviceLink(deviceId uint, linkId uint) (model.Link, error) {
	ret := _m.Called(deviceId, linkId)

	var r0 model.Link
	if rf, ok := ret.Get(0).(func(uint, uint) model.Link); ok {
		r0 = rf(deviceId, linkId)
	} else {
		r0 = ret.Get(0).(model.Link)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(deviceId, linkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceLinks provides a mock function with given fields: deviceId
func (_m *MockDeviceService) GetDeviceLinks(deviceId uint) ([]*model.Link, error) {
	ret := _m.Called(deviceId)

	var r0 []*model.Link
	if rf, ok := ret.Get(0).(func(uint) []*model.Link); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceReview provides a mock function with given fields: deviceId, reviewId
func (_m *MockDeviceService) GetDeviceReview(deviceId uint, reviewId uint) (model.Review, error) {
	ret := _m.Called(deviceId, reviewId)

	var r0 model.Review
	if rf, ok := ret.Get(0).(func(uint, uint) model.Review); ok {
		r0 = rf(deviceId, reviewId)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(deviceId, reviewId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceReviews provides a mock function with given fields: deviceId
func (_m *MockDeviceService) GetDeviceReviews(deviceId uint) ([]model.Review, error) {
	ret := _m.Called(deviceId)

	var r0 []model.Review
	if rf, ok := ret.Get(0).(func(uint) []model.Review); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceScore provides a mock function with given fields: deviceId
func (_m *MockDeviceService) GetDeviceScore(deviceId uint) (model.Scores, error) {
	ret := _m.Called(deviceId)

	var r0 model.Scores
	if rf, ok := ret.Get(0).(func(uint) model.Scores); ok {
		r0 = rf(deviceId)
	} else {
		r0 = ret.Get(0).(model.Scores)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceTraits provides a mock function with given fields: deviceId
func (_m *MockDeviceService) GetDeviceTraits(deviceId uint) ([]*model.Trait, error) {
	ret := _m.Called(deviceId)

	var r0 []*model.Trait
	if rf, ok := ret.Get(0).(func(uint) []*model.Trait); ok {
		r0 = rf(deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Trait)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields:
func (_m *MockDeviceService) GetDevices() ([]model.Device, error) {
	ret := _m.Called()

	var r0 []model.Device
	if rf, ok := ret.Get(0).(func() []model.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockDeviceService creates a new instance of MockDeviceService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDeviceService(t testing.TB) *MockDeviceService {
	mock := &MockDeviceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
