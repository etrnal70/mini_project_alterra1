// Code generated by mockery 2.12.2. DO NOT EDIT.

package domain

import (
	model "secondhand_glossary/internal/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockTraitRepository is an autogenerated mock type for the TraitRepository type
type MockTraitRepository struct {
	mock.Mock
}

// AddTrait provides a mock function with given fields: t
func (_m *MockTraitRepository) AddTrait(t model.Trait) (model.Trait, error) {
	ret := _m.Called(t)

	var r0 model.Trait
	if rf, ok := ret.Get(0).(func(model.Trait) model.Trait); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(model.Trait)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Trait) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrait provides a mock function with given fields: traitId
func (_m *MockTraitRepository) DeleteTrait(traitId uint) error {
	ret := _m.Called(traitId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(traitId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditTrait provides a mock function with given fields: t
func (_m *MockTraitRepository) EditTrait(t model.Trait) (model.Trait, error) {
	ret := _m.Called(t)

	var r0 model.Trait
	if rf, ok := ret.Get(0).(func(model.Trait) model.Trait); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(model.Trait)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Trait) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTraitDevices provides a mock function with given fields: traitId
func (_m *MockTraitRepository) GetTraitDevices(traitId uint) ([]model.Device, error) {
	ret := _m.Called(traitId)

	var r0 []model.Device
	if rf, ok := ret.Get(0).(func(uint) []model.Device); ok {
		r0 = rf(traitId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(traitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTraits provides a mock function with given fields:
func (_m *MockTraitRepository) GetTraits() ([]model.Trait, error) {
	ret := _m.Called()

	var r0 []model.Trait
	if rf, ok := ret.Get(0).(func() []model.Trait); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Trait)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTraitRepository creates a new instance of MockTraitRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTraitRepository(t testing.TB) *MockTraitRepository {
	mock := &MockTraitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
