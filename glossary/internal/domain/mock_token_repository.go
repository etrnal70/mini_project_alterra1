// Code generated by mockery 2.12.2. DO NOT EDIT.

package domain

import (
	jwt "secondhand_glossary/internal/middleware/jwt"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockTokenRepository is an autogenerated mock type for the TokenRepository type
type MockTokenRepository struct {
	mock.Mock
}

// DeleteToken provides a mock function with given fields: id
func (_m *MockTokenRepository) DeleteToken(id string) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: td
func (_m *MockTokenRepository) GetToken(td jwt.TokenDetails) (uint64, error) {
	ret := _m.Called(td)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(jwt.TokenDetails) uint64); ok {
		r0 = rf(td)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(jwt.TokenDetails) error); ok {
		r1 = rf(td)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRefreshToken provides a mock function with given fields:
func (_m *MockTokenRepository) SetRefreshToken() {
	_m.Called()
}

// SetToken provides a mock function with given fields: userId, token
func (_m *MockTokenRepository) SetToken(userId uint, token jwt.TokenDetails) error {
	ret := _m.Called(userId, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, jwt.TokenDetails) error); ok {
		r0 = rf(userId, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTokenRepository creates a new instance of MockTokenRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenRepository(t testing.TB) *MockTokenRepository {
	mock := &MockTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
