// Code generated by mockery 2.12.2. DO NOT EDIT.

package domain

import (
	model "secondhand_glossary/internal/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: userId
func (_m *MockUserService) DeleteUser(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfileDetails provides a mock function with given fields: userId
func (_m *MockUserService) GetProfileDetails(userId uint) (model.User, error) {
	ret := _m.Called(userId)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(uint) model.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *MockUserService) GetUsers() ([]model.User, error) {
	ret := _m.Called()

	var r0 []model.User
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: l
func (_m *MockUserService) Login(l model.UserLogin) (model.User, error) {
	ret := _m.Called(l)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(model.UserLogin) model.User); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserLogin) error); ok {
		r1 = rf(l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: userId
func (_m *MockUserService) Logout(userId uint) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: r
func (_m *MockUserService) Register(r model.UserRegister) (model.User, error) {
	ret := _m.Called(r)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(model.UserRegister) model.User); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserRegister) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: u
func (_m *MockUserService) UpdateProfile(u model.User) (model.User, error) {
	ret := _m.Called(u)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(model.User) model.User); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUserService creates a new instance of MockUserService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUserService(t testing.TB) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
